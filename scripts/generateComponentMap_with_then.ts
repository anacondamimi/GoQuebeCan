import fs from 'fs';
import path from 'path';

const blogPath = path.join(__dirname, 'app', 'blog');
const outputFile = path.join(blogPath, 'componentMap.ts');

function toPascalCase(str: string) {
  return str
    .split(/[-_]/)
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
    .join('');
}

const folders = fs
  .readdirSync(blogPath, { withFileTypes: true })
  .filter((dirent) => dirent.isDirectory());

let output = `// ğŸ”§ Auto-generated by generateComponentMap.ts\n\nconst componentMap: Record<string, () => Promise<any>> = {\n`;

folders.forEach((folder) => {
  const slug = folder.name;
  const componentName = `BlogArticle${toPascalCase(slug)}`;
  const importPath = `@/app/blog/${slug}/${componentName}`;
  output += `  '${slug}': () => import('${importPath}').then(mod => ({ default: mod.${componentName} })),\n`;
});

output += `};\n\nexport default componentMap;\n`;

fs.writeFileSync(outputFile, output, 'utf-8');
console.log(`âœ… componentMap.ts gÃ©nÃ©rÃ© avec succÃ¨s avec .then() : ${outputFile}`);
