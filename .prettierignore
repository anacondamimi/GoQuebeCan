export type CampingData = {
  title: string;
  location: string;
  description: string;
  image: string;
  price: string;
  bestFor: string;
  facilities: string[];
  activities: string[];
  season: string;
  capacity: string;
};
import type { ItineraryPoint } from './itineraryStorage';
import producers from '@/data/producers.json';

function haversineDistance(coord1: [number, number], coord2: [number, number]) {
  const toRad = (x: number) => (x * Math.PI) / 180;
  const R = 6371; // km
  const [lat1, lon1] = coord1;
  const [lat2, lon2] = coord2;
  const dLat = toRad(lat2 - lat1);
  const dLon = toRad(lon2 - lon1);
  const a =
    Math.sin(dLat / 2) ** 2 +
    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) ** 2;
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
}

export function suggestNearbyProducers(
  route: [number, number][],
  maxDistanceKm = 20
) {
  const suggestions: {
    stepIndex: number;
    producer: typeof producers[0];
    distance: number;
  }[] = [];

  route.forEach((step, i) => {
    producers.forEach((p) => {
      const dist = haversineDistance(step, [p.lat, p.lng]);
      if (dist <= maxDistanceKm) {
        suggestions.push({ stepIndex: i, producer: p, distance: dist });
      }
    });
  });

  // Tri par étape et distance
  return suggestions
    .sort((a, b) => a.stepIndex - b.stepIndex || a.distance - b.distance)
    .slice(0, 5); // on limite à 5 suggestions max
}
